--Create the Database

CREATE DATABASE ecommerce;
USE ecommerce;

-- Customers Table

CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    address VARCHAR(255) NOT NULL
);


-- Products Table

CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description TEXT
);


-- Orders Table

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);


-- Insert customers

INSERT INTO customers (name, email, address) VALUES
('John Doe', 'john@example.com', '123 Elm St'),
('Jane Smith', 'jane@example.com', '456 Oak St'),
('Alice Johnson', 'alice@example.com', '789 Pine St');

-- Insert sample products

INSERT INTO products (name, price, description) VALUES
('Product A', 30.00, 'Description for Product A'),
('Product B', 20.00, 'Description for Product B'),
('Product C', 50.00, 'Description for Product C');

-- Insert sample orders

INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, CURDATE(), 100.00),
(2, CURDATE() - INTERVAL 15 DAY, 200.00),
(1, CURDATE() - INTERVAL 5 DAY, 150.00),
(3, CURDATE() - INTERVAL 40 DAY, 75.00);


Queries

1] Retrieve all customers who have placed an order in the last 30 days:

SELECT *
FROM customers c
JOIN orders o ON c.id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

2] Get the total amount of all orders placed by each customer:

SELECT c.name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.id;


3] Update the price of Product C to 45.00:

SET price = 45.00
WHERE name = 'Product C';

4]Add a new column discount to the products table:

ALTER TABLE products
ADD COLUMN discount DECIMAL(5, 2) DEFAULT 0.00;

5] Retrieve the top 3 products with the highest price:

SELECT *
FROM products
ORDER BY price DESC
LIMIT 3;


7] Join the orders and customers tables to retrieve the customer's name and order date for each order:

SELECT c.name, o.order_date
FROM orders o
JOIN customers c ON o.customer_id = c.id;

8] Retrieve the orders with a total amount greater than 150.00:

SELECT *
FROM orders
WHERE total_amount > 150.00;


9] Normalize the database by creating a separate table for order items:

-- Create Order Items Table
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

6] Get the names of customers who have ordered Product A:

SELECT DISTINCT c.name
FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id
WHERE p.name = 'Product A';


10] Retrieve the average total of all orders:

SELECT AVG(total_amount) AS average_order_total
FROM orders;